"use client"

import type React from "react"
import { createContext, useContext, useState } from "react"

type Language = "uz" | "ru" | "en"

interface LanguageContextType {
  language: Language
  setLanguage: (lang: Language) => void
  t: (key: string) => string
}

const translations = {
  uz: {
    // Common
    "app.name": "AMC",
    "app.subtitle": "Advanced Management Center",
    login: "Kirish",
    logout: "Chiqish",
    save: "Saqlash",
    cancel: "Bekor qilish",
    delete: "O'chirish",
    edit: "Tahrirlash",
    add: "Qo'shish",
    search: "Qidirish",
    filter: "Filter",
    status: "Holat",
    active: "Faol",
    inactive: "Nofaol",
    blocked: "Bloklangan",
    name: "Nomi",
    phone: "Telefon",
    address: "Manzil",
    owner: "Egasi",
    password: "Parol",
    username: "Login",
    payment_date: "To'lov sanasi",
    price: "Narx",
    quantity: "Miqdor",
    category: "Kategoriya",
    total: "Jami",
    today: "Bugun",
    week: "Hafta",
    month: "Oy",
    statistics: "Statistika",
    dashboard: "Bosh sahifa",
    products: "Mahsulotlar",
    employees: "Ishchilar",
    stores: "Do'konlar",
    add_store: "Do'kon qo'shish",
    low_stock: "Kam qolgan mahsulotlar",
    out_of_stock: "Tugagan mahsulotlar",
    sales_history: "Savdo tarixi",
    sell: "Sotish",
    sold: "Sotildi",
    daily_sales: "Kunlik savdo",
    daily_profit: "Kunlik foyda",
    total_sales: "Umumiy savdo",
    best_selling: "Eng ko'p sotilganlar",
    inventory: "Ombor",
    add_product: "Mahsulot qo'shish",
    add_employee: "Ishchi qo'shish",
    block: "Bloklash",
    unblock: "Blokdan chiqarish",
    payment_status: "To'lov holati",
    paid: "To'langan",
    unpaid: "To'lanmagan",
    vegetables: "Sabzavotlar",
    fruits: "Mevalar",
    drinks: "Ichimliklar",
    dairy: "Sut mahsulotlari",
    meat: "Go'sht mahsulotlari",
    other: "Boshqa",
    kg: "kg",
    piece: "dona",
    liter: "litr",
    cart: "Savat",
    clear_cart: "Savatni tozalash",
    checkout: "Hisob-kitob",
    sale_completed: "Savdo yakunlandi",
    error: "Xatolik",
    success: "Muvaffaqiyat",
    confirm: "Tasdiqlash",
    are_you_sure: "Ishonchingiz komilmi?",
    this_action_cannot_be_undone: "Bu amalni qaytarib bo'lmaydi",
    reason_for_deletion: "O'chirish sababi",
    enter_reason: "Sababni kiriting",
    page_not_found: "Sahifa topilmadi",
    go_home: "Bosh sahifaga qaytish",
    super_admin: "Super Admin",
    store_owner: "Do'kon egasi",
    employee: "Ishchi",
    role: "Rol",
    select_role: "Rolni tanlang",
    welcome: "Xush kelibsiz",
    enter_credentials: "Ma'lumotlaringizni kiriting",
    invalid_credentials: "Noto'g'ri ma'lumotlar",
    login_successful: "Muvaffaqiyatli kirildi",
    theme: "Mavzu",
    light: "Yorug'",
    dark: "Qorong'u",
    language: "Til",
    settings: "Sozlamalar",
    meter: "metr",
    box: "quti",
  },
  ru: {
    // Common
    "app.name": "AMC",
    "app.subtitle": "Advanced Management Center",
    login: "Войти",
    logout: "Выйти",
    save: "Сохранить",
    cancel: "Отмена",
    delete: "Удалить",
    edit: "Редактировать",
    add: "Добавить",
    search: "Поиск",
    filter: "Фильтр",
    status: "Статус",
    active: "Активный",
    inactive: "Неактивный",
    blocked: "Заблокирован",
    name: "Название",
    phone: "Телефон",
    address: "Адрес",
    owner: "Владелец",
    password: "Пароль",
    username: "Логин",
    payment_date: "Дата оплаты",
    price: "Цена",
    quantity: "Количество",
    category: "Категория",
    total: "Итого",
    today: "Сегодня",
    week: "Неделя",
    month: "Месяц",
    statistics: "Статистика",
    dashboard: "Главная",
    products: "Товары",
    employees: "Сотрудники",
    stores: "Магазины",
    add_store: "Добавить магазин",
    low_stock: "Мало товара",
    out_of_stock: "Нет в наличии",
    sales_history: "История продаж",
    sell: "Продать",
    sold: "Продано",
    daily_sales: "Дневные продажи",
    daily_profit: "Дневная прибыль",
    total_sales: "Общие продажи",
    best_selling: "Лидеры продаж",
    inventory: "Склад",
    add_product: "Добавить товар",
    add_employee: "Добавить сотрудника",
    block: "Заблокировать",
    unblock: "Разблокировать",
    payment_status: "Статус оплаты",
    paid: "Оплачено",
    unpaid: "Не оплачено",
    vegetables: "Овощи",
    fruits: "Фрукты",
    drinks: "Напитки",
    dairy: "Молочные продукты",
    meat: "Мясные продукты",
    other: "Другое",
    kg: "кг",
    piece: "шт",
    liter: "л",
    cart: "Корзина",
    clear_cart: "Очистить корзину",
    checkout: "Оформить",
    sale_completed: "Продажа завершена",
    error: "Ошибка",
    success: "Успех",
    confirm: "Подтвердить",
    are_you_sure: "Вы уверены?",
    this_action_cannot_be_undone: "Это действие нельзя отменить",
    reason_for_deletion: "Причина удаления",
    enter_reason: "Введите причину",
    page_not_found: "Страница не найдена",
    go_home: "На главную",
    super_admin: "Супер Админ",
    store_owner: "Владелец магазина",
    employee: "Сотрудник",
    role: "Роль",
    select_role: "Выберите роль",
    welcome: "Добро пожаловать",
    enter_credentials: "Введите данные",
    invalid_credentials: "Неверные данные",
    login_successful: "Успешный вход",
    theme: "Тема",
    light: "Светлая",
    dark: "Темная",
    language: "Язык",
    settings: "Настройки",
    meter: "м",
    box: "коробка",
  },
  en: {
    // Common
    "app.name": "AMC",
    "app.subtitle": "Advanced Management Center",
    login: "Login",
    logout: "Logout",
    save: "Save",
    cancel: "Cancel",
    delete: "Delete",
    edit: "Edit",
    add: "Add",
    search: "Search",
    filter: "Filter",
    status: "Status",
    active: "Active",
    inactive: "Inactive",
    blocked: "Blocked",
    name: "Name",
    phone: "Phone",
    address: "Address",
    owner: "Owner",
    password: "Password",
    username: "Username",
    payment_date: "Payment Date",
    price: "Price",
    quantity: "Quantity",
    category: "Category",
    total: "Total",
    today: "Today",
    week: "Week",
    month: "Month",
    statistics: "Statistics",
    dashboard: "Dashboard",
    products: "Products",
    employees: "Employees",
    stores: "Stores",
    add_store: "Add Store",
    low_stock: "Low Stock",
    out_of_stock: "Out of Stock",
    sales_history: "Sales History",
    sell: "Sell",
    sold: "Sold",
    daily_sales: "Daily Sales",
    daily_profit: "Daily Profit",
    total_sales: "Total Sales",
    best_selling: "Best Selling",
    inventory: "Inventory",
    add_product: "Add Product",
    add_employee: "Add Employee",
    block: "Block",
    unblock: "Unblock",
    payment_status: "Payment Status",
    paid: "Paid",
    unpaid: "Unpaid",
    vegetables: "Vegetables",
    fruits: "Fruits",
    drinks: "Drinks",
    dairy: "Dairy Products",
    meat: "Meat Products",
    other: "Other",
    kg: "kg",
    piece: "pcs",
    liter: "l",
    cart: "Cart",
    clear_cart: "Clear Cart",
    checkout: "Checkout",
    sale_completed: "Sale Completed",
    error: "Error",
    success: "Success",
    confirm: "Confirm",
    are_you_sure: "Are you sure?",
    this_action_cannot_be_undone: "This action cannot be undone",
    reason_for_deletion: "Reason for deletion",
    enter_reason: "Enter reason",
    page_not_found: "Page Not Found",
    go_home: "Go Home",
    super_admin: "Super Admin",
    store_owner: "Store Owner",
    employee: "Employee",
    role: "Role",
    select_role: "Select Role",
    welcome: "Welcome",
    enter_credentials: "Enter your credentials",
    invalid_credentials: "Invalid credentials",
    login_successful: "Login successful",
    theme: "Theme",
    light: "Light",
    dark: "Dark",
    language: "Language",
    settings: "Settings",
    meter: "m",
    box: "box",
  },
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguage] = useState<Language>("uz")

  const t = (key: string): string => {
    return translations[language][key as keyof (typeof translations)[typeof language]] || key
  }

  return <LanguageContext.Provider value={{ language, setLanguage, t }}>{children}</LanguageContext.Provider>
}

export function useLanguage() {
  const context = useContext(LanguageContext)
  if (context === undefined) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}
